name: Build RC Generator for Windows and macOS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed --name "RC_Generator" --add-data "Planificare Elmet.xlsx;." --add-data "Tehnologii.xlsx;." --version-file "version_info.txt" --manifest "manifest.xml" route_card_coc_app.py
    
    - name: Create Windows installer folder
      run: |
        mkdir RC_Generator_Windows_Installer
        copy "dist\RC_Generator.exe" "RC_Generator_Windows_Installer\"
        copy "README_Installation.md" "RC_Generator_Windows_Installer\README.txt"
        copy "Planificare Elmet.xlsx" "RC_Generator_Windows_Installer\"
        copy "Tehnologii.xlsx" "RC_Generator_Windows_Installer\"
    
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: RC_Generator_Windows
        path: RC_Generator_Windows_Installer/
        retention-days: 90

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        # Install macOS specific dependencies
        pip install dmgbuild || echo "dmgbuild not available, using hdiutil"
        
    - name: Debug Python and PyQt6 installation
      run: |
        python --version
        python -c "from PyQt6.QtCore import QT_VERSION_STR; print('PyQt6 version:', QT_VERSION_STR)"
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import PyQt6; print('PyQt6 installed successfully')"
        python -c "import PyQt6.QtWidgets; print('PyQt6.QtWidgets imported successfully')"
        python -c "import pandas; print('pandas imported successfully')"
        python -c "import numpy; print('numpy imported successfully')"
        python -c "import xlsxwriter; print('xlsxwriter imported successfully')"
        python -c "import openpyxl; print('openpyxl imported successfully')"
        
    - name: Test script imports
      run: |
        python -c "
        try:
            import sys
            import os
            sys.path.insert(0, '.')
            # Test imports without GUI initialization
            print('Testing script imports...')
            import pandas as pd
            import numpy as np
            from PyQt6.QtWidgets import QApplication
            from PyQt6.QtCore import Qt
            import xlsxwriter
            import openpyxl
            print('All imports successful!')
        except Exception as e:
            print(f'Import error: {e}')
            sys.exit(1)
        "
    
    - name: Build macOS application
      run: |
        pyinstaller --noconfirm --windowed --name "RC_Generator" \
          --add-data "Planificare Elmet.xlsx:." \
          --add-data "Tehnologii.xlsx:." \
          --exclude-module tkinter \
          --hidden-import PyQt6.QtCore \
          --hidden-import PyQt6.QtGui \
          --hidden-import PyQt6.QtWidgets \
          --hidden-import pandas \
          --hidden-import numpy \
          --hidden-import xlsxwriter \
          --hidden-import openpyxl \
          route_card_coc_app.py
        
    - name: Check build output
      run: |
        echo "Checking dist directory:"
        ls -la dist/
        echo "Checking if app exists:"
        if [ -d "dist/RC_Generator.app" ]; then
          echo "✅ RC_Generator.app created successfully"
          ls -la "dist/RC_Generator.app/"
        else
          echo "❌ RC_Generator.app not found"
          exit 1
        fi
        
    - name: Prepare app for distribution
      run: |
        echo "Preparing RC_Generator.app for distribution..."
        # Remove extended attributes that cause Gatekeeper issues
        xattr -cr "dist/RC_Generator.app" || echo "No extended attributes to remove"
        
        # Create installation instructions
        cat > INSTALLATION_INSTRUCTIONS.txt << 'EOF'
        RC Generator - Installation Instructions
        ======================================
        
        IMPORTANT: This app is not signed with an Apple Developer certificate.
        
        To install and run RC Generator:
        
        1. Double-click the RC_Generator.dmg file
        2. Drag RC_Generator.app to the Applications folder
        3. Right-click on RC_Generator.app in Applications
        4. Select "Open" from the menu
        5. Click "Open" when macOS asks about the unverified developer
        
        Alternative method:
        - Go to System Preferences → Security & Privacy → General
        - Look for "RC_Generator was blocked" message
        - Click "Open Anyway"
        
        The app is safe to use - this warning appears because we don't have 
        an Apple Developer certificate for code signing.
        
        After the first successful open, macOS will remember your choice.
        EOF
        
    - name: Create DMG
      run: |
        mkdir dmg_temp
        if [ -d "dist/RC_Generator.app" ]; then
          cp -R "dist/RC_Generator.app" dmg_temp/
          cp "INSTALLATION_INSTRUCTIONS.txt" dmg_temp/
        else
          echo "RC_Generator.app not found, checking what was built:"
          ls -la dist/
          exit 1
        fi
        ln -s /Applications dmg_temp/Applications
        hdiutil create -volname "RC Generator" -srcfolder dmg_temp -ov -format UDZO "RC_Generator.dmg"
        rm -rf dmg_temp
    
    - name: Create macOS installer folder
      run: |
        mkdir RC_Generator_macOS_Installer
        cp "RC_Generator.dmg" "RC_Generator_macOS_Installer/"
        cp "README_Installation.md" "RC_Generator_macOS_Installer/"
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RC_Generator_macOS
        path: RC_Generator_macOS_Installer/
        retention-days: 90

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: RC_Generator_Windows
        path: windows/
        
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: RC_Generator_macOS
        path: macos/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          windows/*
          macos/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
